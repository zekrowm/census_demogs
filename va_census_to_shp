
```{r Description}

# script written 9/18/2023 to combine Census data at different levels
# Census Block, Block Group, and Tract, and join with .shp for export
# some renaming and selection of columns and calculations are done also
# focus on jobs, income, race, disability, language, and other demographics
# considered relevant for transit service
# Fairfax Connector
# Functional improvements would be: 1) adding MD & DC .shp and .csv data 2) making column names .shp-compatible 3) open jobs data .csv.gz directky 4) AMEND TO CALCULATE NUMBER OF WORKERS EST, NOT JUST SUTAINABLE COMMUTERS

```

```{r libraries, jurisdiction ids, file locations}

# Load libraries
library(sf)
library(dplyr)
library(readr)
library(utils)
library(stringr)
library(data.table)



# Define jurisdiction IDs to keep
jurisdiction_ids <- c('11001', '24031', '24033', '51013', '51059', '51107', '51153', '51510', '51600', '51610', '51683', '51685')



# Define shapefile locations for import and export

# Define export shapefile path and name
shapefile_export_path <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/sf_tracts_09_25_2023.shp"

# .shp data source: US Census https://www.census.gov/cgi-bin/geo/shapefiles/index.php

# import census geography shapefile
shapefile_dir <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project"
shapefile_name <- "tl_2022_51_tabblock20"
shapefile_path <- file.path(shapefile_dir, paste0(shapefile_name, ".shp"))



# Define block level data locations for import

# JOBS - WORK LOCATIONS ONLY (WAC) - BLOCK
# Data Source: US Census LODES/LEHD https://lehd.ces.census.gov/data/
# File paths
va_file <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/va_wac_S000_JT00_2020.csv.gz"
md_file <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/md_wac_S000_JT00_2020.csv.gz"  
dc_file <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/dc_wac_S000_JT00_2020.csv.gz"



# Define tract level data locations for import

# Demographic data source: US Census https://data.census.gov/table

# Specify file location for race chunk
racehisp_data_file_location <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/DECENNIALPL2020.P2-Data.csv"

# Specify file location for households chunk
#racehisp_data_file_location <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/DECENNIALPL2020.P2-Data.csv"

# Specify file location for income chunk
income_data_file_location <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/ACSDT5Y2021.B19001-Data.csv"

# Specify file location for age chunk
age_data_file_location <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/ACSDT5Y2021.B01001-Data.csv"

# Specify file location for disabled chunk
disabled_data_file_location <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/ACSDT5Y2021.B18101-Data.csv"

# Specify file location for language chunk
lep_data_file_location <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/ACSDT5Y2021.C16001-Data.csv"

# Specify file location for vehicles chunk
vehicles_data_file_location <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/ACSDT5Y2021.B08201-Data.csv"

# Specify file location for commute chunk
commute_data_file_location <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/ACSST5Y2021.S0801-Data.csv"

```

```{r Jobs for block}

# Import the gzipped CSV files
df_va <- read.csv(gzfile(va_file))
df_md <- read.csv(gzfile(md_file))
df_dc <- read.csv(gzfile(dc_file))

# Concatenate data frames by rows (assuming all data frames have the same structure)
df_jobs <- rbind(df_va, df_md, df_dc)

# Drop row 2 of df_jobs because it is blank (if applicable)
df_jobs <- df_jobs[-2,]

# Rename columns for better readability
column_mapping <- c(
  "w_geocode" = "w_geocode",
  "C000" = "tot_empl",
  "CE01" = "low_wage",
  "CE02" = "mid_wage",
  "CE03" = "high_wage"
)
names(df_jobs) <- column_mapping

# Convert the "w_geocode" column to string type
df_jobs$w_geocode <- as.character(df_jobs$w_geocode)

# Create a new column with the desired prefix and convert to string
df_jobs$GEO_ID <- paste0('1000000US', df_jobs$w_geocode)

# Create new column for jurisdiction id
df_jobs$df_jurisdiction_id <- substr(df_jobs$GEO_ID, start = 10, stop = 14)

# Filter the df_jobs data frame by the df_jurisdiction_id column (assuming 'jurisdiction_ids' is defined)
df_jobs <- df_jobs[df_jobs$df_jurisdiction_id %in% jurisdiction_ids,]

# Keep only needed columns
df_jobs <- df_jobs %>%
  select(GEO_ID, w_geocode, tot_empl, low_wage, mid_wage, high_wage)

print(df_jobs)

```

```{r Population for block}

# POPULATION TOTAL -BLOCK
# Table P1

# Import the file
df_population <- read.csv("C:/Users/zach/Documents/r_stuff/census_to_shp_project/DECENNIALPL2020.P1-Data.csv")

# something strange with rows, appears to be working differently from others. caution
# Drop the 2nd row, which is empty
df_population <- df_population %>% slice(-1)

# Mutate to create new column with new name
df_population <- df_population %>%
  mutate(tot_pop_block = P1_001N) 

# Convert columns to string data type
df_population <- mutate(df_population, 
                        GEO_ID = as.character(GEO_ID))

# Create new column for jurisdiction id
df_population <- mutate(df_population,
  df_jurisdiction_id = substr(GEO_ID, 10, 14))

# Filter by desired jursidiction id
df_population <- df_population %>% filter(df_jurisdiction_id %in% jurisdiction_ids)

# Create a new dataframe with only the specified columns
df_population <- df_population %>% select(GEO_ID, NAME, tot_pop_block)

print(df_population)

```

```{r Households for block}
# HOUSEHOLD SIZE - HOUSEHOLDS - BLOCK
# Table H9


# File paths
household_file <- "C:/Users/zach/Documents/r_stuff/census_to_shp_project/DECENNIALDHC2020.H9-Data.csv"

# Import and filter VA data
df_household <- read.csv(household_file)

# Drop the 2nd row, which is empty
df_household <- df_household %>% slice(-2)

# Rename column names in the new dataframe
df_household <- df_household %>% rename(total_hh_block = H9_001N)

# Convert columns to numeric data type
df_household$total_hh_block <- as.numeric(df_household$total_hh_block)
                           
# Create new column for jurisidction id
df_household$df_jurisdiction_id <- substr(df_household$GEO_ID, start = 10, stop = 14)

# Filter by desired jursidiction id
df_household <- df_household %>% filter(df_jurisdiction_id %in% jurisdiction_ids)

# Create a new dataframe with only the specified columns, NAME removed
df_household <- df_household %>% select(GEO_ID, total_hh_block)

# Print data sample for visual check
print(df_household)

```

```{r Race Ethnicity}

# RACE AND ETHNICITY - PEOPLE - BLOCK
# Table P2



# Read the census data, specifying the type of data for the GEO_ID column
df_racehisp <- read.csv(racehisp_data_file_location, colClasses = c(GEO_ID = "character"))

# Drop the 2nd row, which is empty
df_racehisp <- df_racehisp %>% slice(-2)

# Rename column names in the new dataframe
df_racehisp <- df_racehisp %>% rename(
  total_pop = P2_001N,
  hisp_latino = P2_002N,
  nhisp_white = P2_005N,
  nhisp_blackafr = P2_006N,
  nhisp_indnatamer = P2_007N,
  nhisp_asian = P2_008N,
  nhisp_hawpacisl = P2_009N,
  nhisp_other = P2_010N,
  nhisp_multirac = P2_011N
)

# Convert all numeric columns to numeric
numeric_columns <- names(df_racehisp)[-c(1,2)]
df_racehisp[numeric_columns] <- lapply(df_racehisp[numeric_columns], as.integer)

# Sum all minority columns together
df_racehisp$all_minority <- df_racehisp$hisp_latino + df_racehisp$nhisp_blackafr + df_racehisp$nhisp_indnatamer + df_racehisp$nhisp_asian + df_racehisp$nhisp_hawpacisl + df_racehisp$nhisp_other + df_racehisp$nhisp_multirac

# Calculate percent minority
df_racehisp$all_minority_perc <- df_racehisp$all_minority / df_racehisp$total_pop

# Replace any null values in the columns with 0's
#df_racehisp <- df_racehisp %>%
#  mutate_at(numeric_columns, ~coalesce(.x, 0))

# Replace NaN values in numeric columns with 0
df_racehisp <- df_racehisp %>%
  mutate(
    all_minority_perc = coalesce(all_minority_perc, 0), 
    total_pop = coalesce(total_pop, 0),
    all_minority = coalesce(all_minority, 0)
  )
        
# Round "all_minority_perc" to 4 decimal places
df_racehisp$all_minority_perc <- round(df_racehisp$all_minority_perc, 4)

# Create new column for filtering by jurisdiction id
df_racehisp$df_jurisdiction_id <- substr(df_racehisp$GEO_ID, start = 10, stop = 14)

# Filter the data frame based on the df_jurisdiction_id column
df_racehisp <- df_racehisp %>%
  dplyr::filter(df_jurisdiction_id %in% jurisdiction_ids)

# Create a new dataframe with the specified columns
df_racehisp <- df_racehisp %>% select(GEO_ID, NAME, all_minority, total_pop, all_minority_perc)

# Print data for visual check
print(df_racehisp)

```

```{r Low Income}

#LOW INCOME - HOUSEHOLD - BLOCK GROUP
# Table B19001

# Read the census data, specifying the type of data for the GEO_ID column
df_income <- read.csv(income_data_file_location, colClasses = c(GEO_ID = "character"))

# Drop the 2nd row, which is empty
df_income <- df_income %>% slice(-2)

# Rename column names in the new dataframe
df_income <- df_income %>% rename(total_hh = B19001_001E)
df_income <- df_income %>% rename(income_u_10k = B19001_002E)
df_income <- df_income %>% rename(income_10k_15k = B19001_003E)
df_income <- df_income %>% rename(income_15k_20k = B19001_004E)
df_income <- df_income %>% rename(income_20k_25k = B19001_005E)
df_income <- df_income %>% rename(income_25k_30k = B19001_006E)
df_income <- df_income %>% rename(income_30k_35k = B19001_007E)
df_income <- df_income %>% rename(income_35k_40k = B19001_008E)
df_income <- df_income %>% rename(income_40k_45k = B19001_009E)
df_income <- df_income %>% rename(income_45k_50k = B19001_010E)
df_income <- df_income %>% rename(income_50k_60k = B19001_011E)

# Convert all numeric columns to numeric
numeric_columns <- names(df_income)[-c(1,2)]
df_income[numeric_columns] <- lapply(df_income[numeric_columns], as.integer)

# Create new column for filtering by jurisdiction
df_income$df_jurisdiction_id <- substr(df_income$GEO_ID, start = 10, stop = 14)

# Filter in only the relevant ones
df_income <- df_income %>% filter(df_jurisdiction_id %in% jurisdiction_ids)

# Sum all relevant columns together, then divide by total hhs
df_income <- df_income %>%
  mutate(income_u_60k = income_u_10k + income_10k_15k + income_15k_20k) %>%
  mutate(income_u_60k_perc = income_u_60k / total_hh)

# Round "income_u_60k_perc" to 4 decimal places
df_income <- df_income %>%
  mutate(income_u_60k_perc = round(income_u_60k_perc, 4))

# Identify rows where total_pop is zero
zero_total_hh_rows <- df_income %>%
  filter(total_hh == 0)

# Set to 0.0 for the identified rows
df_income <- df_income %>%
  mutate(income_u_60k_perc = ifelse(total_hh == 0, 0.0, income_u_60k_perc),
         income_u_60k = ifelse(total_hh == 0, 0.0, income_u_60k))

# Create a new dataframe with only the needed columns
df_income <- df_income %>% select(GEO_ID, NAME, total_hh, income_u_60k, income_u_60k_perc)

# Check for non-numeric values in the specified columns of df_income and print them
non_numeric_values <- df_income[ !is.numeric(df_income[, c("total_hh", "income_u_60k", "income_u_60k_perc")]) ]
print(non_numeric_values)

# Print data sample for visual check
print(df_income)

```

```{r Elderly Youth}

#ELDERLY & YOUTH - PEOPLE - BLOCK GROUP
# Table B01001



# Read the census data, specifying the type of data for the GEO_ID column
df_age <- read.csv(age_data_file_location, colClasses = c(GEO_ID = "character"))

# Delete row 0 with duplicate headers
df_age <- df_age[-1, ]

# Rename bad column names
df_age <- df_age %>%
  rename(
    total_pop = B01001_001E,
    m_15_17 = B01001_006E,
    m_18_19 = B01001_007E,
    m_20 = B01001_008E,
    m_21 = B01001_009E,
    m_65_66 = B01001_020E,
    m_67_69 = B01001_021E,
    m_70_74 = B01001_022E,
    m_75_79 = B01001_023E,
    m_80_84 = B01001_024E,
    m_a_85 = B01001_025E,
    f_15_17 = B01001_030E,
    f_18_19 = B01001_031E,
    f_20 = B01001_032E,
    f_21 = B01001_033E,
    f_65_66 = B01001_044E,
    f_67_69 = B01001_045E,
    f_70_74 = B01001_046E,
    f_75_79 = B01001_047E,
    f_80_84 = B01001_048E,
    f_a_85 = B01001_049E
  )

# Convert all numeric columns to numeric
numeric_columns <- names(df_age)[-c(1,2)]
df_age[numeric_columns] <- lapply(df_age[numeric_columns], as.integer)

# Sum all relevant columns together
df_age$all_youth <- df_age$m_15_17 + df_age$f_15_17 + df_age$m_18_19 + df_age$f_18_19 + df_age$m_20 + df_age$f_20 + df_age$m_21 + df_age$f_21
df_age$all_elderly <- df_age$m_65_66 + df_age$f_65_66 + df_age$m_67_69 + df_age$f_67_69 + df_age$m_70_74 + df_age$f_70_74 + df_age$m_75_79 + df_age$f_75_79 + df_age$m_80_84 + df_age$f_80_84 + df_age$m_a_85 + df_age$f_a_85

# Calculate youth and elderly percentages
df_age$all_youth_perc <- df_age$all_youth / df_age$total_pop
df_age$all_elderly_perc <- df_age$all_elderly / df_age$total_pop

# Round youth and elderly percentages to 4 decimal places
df_age$all_youth_perc <- round(df_age$all_youth_perc, 4)
df_age$all_elderly_perc <- round(df_age$all_elderly_perc, 4)

# Create a variable for jurisdiction ID
df_age$df_jurisdiction_id <- substr(df_age$GEO_ID, str_locate(df_age$GEO_ID, "S") + 1, str_locate(df_age$GEO_ID, "S") + 5)

# Filter the data frame to only include the relevant jurisdiction IDs
df_age <- df_age %>%
  filter(df_jurisdiction_id %in% jurisdiction_ids)

# Create a new dataframe with only needed columns
df_age <- df_age[, c("GEO_ID", "NAME", "all_youth", "all_youth_perc", "all_elderly", "all_elderly_perc", "total_pop")]

# Replace NaN values in the all_elderly_perc and all_youth_perc columns with 0
df_age <- df_age %>%
  mutate(all_elderly_perc = coalesce(all_elderly_perc, 0),
         all_youth_perc = coalesce(all_youth_perc, 0))

# Print data sample for visual check
print(df_age)

```

```{r LEP}

#LOW ENGLISH PROFICIENCY - PEOPLE - TRACT
# Table C16001



# Read the census data, specifying the type of data for the GEO_ID column
df_language <- read.csv(lep_data_file_location, colClasses = c(GEO_ID = "character"))

# Delete row 0 with duplicate headers
df_language <- df_language[-1,]

# Rename bad column names in new dataframe
df_language <- rename(df_language,
                     total_lang_pop = C16001_001E,
                     spanish_engnwell = C16001_005E,
                     frenchetc_engnwell = C16001_008E,
                     germanetc_engnwell = C16001_011E,
                     slavicetc_engnwell = C16001_014E,
                     indoeuroetc_engnwell = C16001_017E,
                     korean_engnwell = C16001_020E,
                     chineseetc_engnwell = C16001_023E,
                     vietnamese_engnwell = C16001_026E,
                     asiapacetc_engnwell = C16001_032E,
                     arabic_engnwell = C16001_035E,
                     otheretc_engnwell = C16001_037E)

# create a new dataframe with only needed columns
df_language <- df_language %>%
  select(GEO_ID, NAME, spanish_engnwell, frenchetc_engnwell, germanetc_engnwell, slavicetc_engnwell, indoeuroetc_engnwell, korean_engnwell, chineseetc_engnwell, vietnamese_engnwell, asiapacetc_engnwell, arabic_engnwell, otheretc_engnwell, total_lang_pop)

# Convert all numeric columns to numeric
numeric_columns <- names(df_language)[-c(1,2)]
df_language[numeric_columns] <- lapply(df_language[numeric_columns], as.integer)

# sum all LEP columns together
df_language$all_nwell <- df_language$spanish_engnwell + df_language$frenchetc_engnwell + df_language$germanetc_engnwell + df_language$slavicetc_engnwell + df_language$indoeuroetc_engnwell + df_language$korean_engnwell + df_language$chineseetc_engnwell + df_language$vietnamese_engnwell + df_language$asiapacetc_engnwell + df_language$arabic_engnwell + df_language$otheretc_engnwell

# check all calculation columns for null values and replace
df_language <- df_language %>%
  mutate(
    total_lang_pop = coalesce(total_lang_pop, 0),
    all_nwell = coalesce(all_nwell, 0)
  )

# calculate percent of LEP speakers
df_language$all_nwell_perc <- df_language$all_nwell / df_language$total_lang_pop

# Created due to errors, maybe not needed anymore
#set the value of all_nwell_perc to 0 for rows where total_lang_pop or all_nwell are 0
df_language$all_nwell_perc[df_language$total_lang_pop == 0 | df_language$all_nwell == 0] <- 0

# Round "all_nwell_perc" to 4 decimal places
df_language$all_nwell_perc <- round(df_language$all_nwell_perc, 4)

# Create a variable for jurisdiction ID
df_language$df_jurisdiction_id <- df_language$GEO_ID %>% str_sub(10, 14)

# Filter the data frame based on the df_jurisdiction_id column
df_language <- df_language %>%
  dplyr::filter(df_jurisdiction_id %in% jurisdiction_ids)

# create a new dataframe with only needed columns
df_language <- df_language[c("GEO_ID", "NAME", "total_lang_pop", "all_nwell", "all_nwell_perc")]

# Print a sample to check for issues
print(df_language)

```

```{r Vehicles}

# LOW VEHICLE - HOUSEHOLDS - TRACT
# Table B08201



# Read the census data, specifying the type of data for the GEO_ID column
df_vehicles <- read.csv(vehicles_data_file_location, colClasses = c(GEO_ID = "character"))

# Delete row 0 with duplicate headers
df_vehicles <- df_vehicles[-1,]

# Rename bad column names in new dataframe
df_vehicles <- rename(df_vehicles, all_hh_veh_tract = B08201_001E)
df_vehicles <- rename(df_vehicles, veh_0_hh = B08201_002E)
df_vehicles <- rename(df_vehicles, veh_1_hh = B08201_003E)

#convert to numeric data
df_vehicles$all_hh_veh_tract <- as.integer(df_vehicles$all_hh_veh_tract)
df_vehicles$veh_0_hh <- as.integer(df_vehicles$veh_0_hh)
df_vehicles$veh_1_hh <- as.integer(df_vehicles$veh_1_hh)

#calc percent tract 0 and 1 vehicle
df_vehicles$veh_0_hh_perc <- df_vehicles$veh_0_hh / df_vehicles$all_hh_veh_tract
df_vehicles$veh_1_hh_perc <- df_vehicles$veh_1_hh / df_vehicles$all_hh_veh_tract
df_vehicles$veh_0_1_hh_perc <- df_vehicles$veh_0_hh_perc + df_vehicles$veh_1_hh_perc

# Drop rows where all three columns have null or zero values
df_vehicles <- df_vehicles %>% filter(!(veh_0_hh_perc == 0 | is.na(veh_0_hh_perc)) & !(veh_1_hh_perc == 0 | is.na(veh_1_hh_perc)) & !(veh_0_1_hh_perc == 0 | is.na(veh_0_1_hh_perc)))

# Round "veh_0_hh_perc" "veh_1_hh_perc" and "veh_0_1_hh_perc" to 4 decimal places
df_vehicles$veh_0_hh_perc <- round(df_vehicles$veh_0_hh_perc, 4)
df_vehicles$veh_1_hh_perc <- round(df_vehicles$veh_1_hh_perc, 4)
df_vehicles$veh_0_1_hh_perc <- round(df_vehicles$veh_0_1_hh_perc, 4)

# Create a variable for jurisdiction ID
df_vehicles$df_jurisdiction_id <- df_vehicles$GEO_ID %>% str_sub(10, 14)

# Filter the data frame based on the df_jurisdiction_id column
df_vehicles <- df_vehicles %>%
  dplyr::filter(df_jurisdiction_id %in% jurisdiction_ids)

# create a new dataframe with only needed columns
df_vehicles <- df_vehicles %>% select(GEO_ID, NAME, all_hh_veh_tract, veh_0_hh, veh_1_hh, veh_0_hh_perc, veh_1_hh_perc, veh_0_1_hh_perc)

# Print to check for issues
print(df_vehicles)


```

```{r Disabled}

# DISABLED - PEOPLE - TRACT
# Table B18101


# Read the census data, specifying the type of data for the GEO_ID column
df_disabled <- read.csv(disabled_data_file_location, colClasses = c(GEO_ID = "character"))

# Delete row 0 with duplicate headers
df_disabled <- df_disabled[-1,]

# Convert all numeric columns to numeric
numeric_columns <- names(df_disabled)[-c(1,2)]
df_disabled[numeric_columns] <- lapply(df_disabled[numeric_columns], as.integer)

# Rename bad column names in new dataframe
df_disabled <- df_disabled %>%
  rename(
    total_pop_uable = B18101_001E,
    m_u_5_disab = B18101_004E,
    m_5_17_disab = B18101_007E,
    m_18_34_disab = B18101_010E,
    m_35_64_disab = B18101_013E,
    m_65_74_disab = B18101_016E,
    m_a_75_disab = B18101_019E,
    f_u_5_disab = B18101_023E,
    f_5_17_disab = B18101_026E,
    f_18_34_disab = B18101_029E,
    f_35_64_disab = B18101_032E,
    f_65_74_disab = B18101_035E,
    f_a_75_disab = B18101_038E
  )

# Calculate total disabled for tract
df_disabled <- df_disabled %>%
  mutate(
    all_disab = m_u_5_disab + m_5_17_disab + m_18_34_disab + m_35_64_disab + m_65_74_disab + m_a_75_disab + f_u_5_disab + f_5_17_disab + f_18_34_disab + f_35_64_disab + f_65_74_disab + f_a_75_disab
  )

# Calculate the disabled tract percentage
df_disabled <- df_disabled %>%
  mutate(
    disabled_tract_perc = all_disab / total_pop_uable
  )

# Replace any null values in the all_disab, total_pop_uable, and disabled_tract_perc columns with 0's
df_disabled <- df_disabled %>%
  mutate(
    all_disab = coalesce(all_disab, 0),
    total_pop_uable = coalesce(total_pop_uable, 0),
    disabled_tract_perc = coalesce(disabled_tract_perc, 0)
  )

# Round the disabled tract percentage to 4 decimal places
df_disabled <- df_disabled %>%
  mutate(
    disabled_tract_perc = round(disabled_tract_perc, 4)
  )

# Create a variable for jurisdiction ID
df_disabled$df_jurisdiction_id <- df_disabled$GEO_ID %>% str_sub(10, 14)

# Filter in only relevant data by jurisdiction id
df_disabled <- df_disabled %>%
  dplyr::filter(df_jurisdiction_id %in% jurisdiction_ids)

# create a new dataframe with only needed columns
df_disabled <- df_disabled %>%
  select(GEO_ID, NAME, all_disab, total_pop_uable, disabled_tract_perc)

# Print df to check for issues
print(df_disabled)

```

```{r Commute}

# COMMUTE - WORKERS - TRACT
# Table S0801


# Read the census data, specifying the type of data for the GEO_ID column
df_commute <- read.csv(commute_data_file_location, colClasses = c(GEO_ID = "character"))

# Delete row 0 with duplicate headers
df_commute <- df_commute[-1,]

# Rename bad column names in new dataframe
df_commute <- df_commute %>%
  rename(
    total_workers = S0801_C01_001E,
    transit_commuters = S0801_C01_009E,
    walking_commuters = S0801_C01_010E,
    biking_commuters = S0801_C01_011E
  )

# Convert the total_workers, transit_commuters, walking_commuters, and biking_commuters columns to integers
df_commute <- df_commute %>%
  mutate(
    total_workers = as.integer(total_workers),
    transit_commuters = as.integer(transit_commuters),
    walking_commuters = as.integer(walking_commuters),
    biking_commuters = as.integer(biking_commuters)
  )

# Calculate the mode share percent for tract
df_commute <- df_commute %>%
  mutate(
    transit_mode_perc = transit_commuters / total_workers,
    walking_mode_perc = walking_commuters / total_workers,
    biking_mode_perc = biking_commuters / total_workers
  )

# Calculate total sustainable mode share
df_commute <- df_commute %>%
  mutate(
    walk_bike_transit_commuters_perc = transit_mode_perc + walking_mode_perc + biking_mode_perc
  )

# Replace any null values in the walk_bike_transit_commuters_perc and total_workers columns with 0's
df_commute <- df_commute %>%
  mutate(
    walk_bike_transit_commuters_perc = coalesce(walk_bike_transit_commuters_perc, 0),
    total_workers = coalesce(total_workers, 0)
  )

# Round the commute tract percentage to 4 decimal places
df_commute <- df_commute %>%
  mutate(
    walk_bike_transit_commuters_perc = round(walk_bike_transit_commuters_perc, 4),
    transit_mode_perc = round(transit_mode_perc, 4),
    walking_mode_perc = round(walking_mode_perc, 4),
    biking_mode_perc = round(biking_mode_perc, 4),
  )

# Create a variable for jurisdiction ID
df_commute$df_jurisdiction_id <- df_commute$GEO_ID %>% str_sub(10, 14)

# Filter the data frame based on the df_jurisdiction_id column
df_commute <- df_commute %>%
  dplyr::filter(df_jurisdiction_id %in% jurisdiction_ids)

# create a new dataframe with only needed columns
df_commute <- df_commute %>%
  select(GEO_ID, NAME, walk_bike_transit_commuters_perc, total_workers)

# Print df to check for issues
print(df_commute)

```

```{r import and filter Tracts .shp}

# Read the shapefile using sf
sf_tracts <- st_read(dsn = shapefile_path)

# Create a new column named STATE_COUNTY_FP
sf_tracts <- sf_tracts %>%
  mutate(STATE_COUNTY_FP = paste(STATEFP20, COUNTYFP20, sep = ""))

# Filter the sf_tracts data frame based on STATE_COUNTY_FP and drop all features that do not match part of the list jurisdiction_ids
sf_tracts <- sf_tracts %>%
  filter(STATE_COUNTY_FP %in% jurisdiction_ids)

# Create a synthetic tract ID column using the `mutate()` function
sf_tracts <- sf_tracts %>%
  mutate(tract_id_synth = substr(GEOID20, 1, 11))

# Get column index for LineAbbr
county_id_index <- which(colnames(sf_tracts) == "GEOID")
# Plot LineAbbr column 
plot(sf_tracts[,county_id_index], 
     main="Census Blocks")

# Print first 6 rows of census shapefile attribute table with columns GEOID20 and GEOID
print("Printing first 6 rows of stops shapefile attribute table:")
print(sf_tracts[1:6,] %>% select(GEOID20, tract_id_synth))

# Print first 6 rows of census shapefile attribute table 
print("Printing first 6 rows of stops shapefile attribute table:")
print(sf_tracts[1:6,])

```

```{r join data tables}

# Optional join for data at block level by GEO_ID

# Convert columns to strings
df_jobs$GEO_ID <- as.character(df_jobs$GEO_ID)
df_household$GEO_ID <- as.character(df_household$GEO_ID)
df_population$GEO_ID <- as.character(df_population$GEO_ID)

# Join on tables on GEO_ID
df_joined_blocks <- left_join(df_jobs, df_household, by = c("GEO_ID")) %>%
            left_join(df_population,  by = c("GEO_ID"))

# Replace any null values in the all_disab, total_pop_uable, and disabled_tract_perc columns with 0's
df_joined_blocks <- df_joined_blocks %>%
  mutate(
    tot_pop_block = coalesce(as.numeric(tot_pop_block), 0),
    total_hh_block = coalesce(as.numeric(total_hh_block), 0),
    tot_empl = coalesce(as.numeric(tot_empl), 0),
    high_wage = coalesce(as.numeric(high_wage), 0),
    mid_wage = coalesce(as.numeric(mid_wage), 0),
    low_wage = coalesce(as.numeric(low_wage), 0)
  )

# create synthetic tract id for joins
df_joined_blocks$tract_id_synth <- as.character(substr(df_joined_blocks$GEO_ID, 10, 20))

# create a new dataframe with only needed columns
df_joined_blocks <- df_joined_blocks %>%
  select(GEO_ID, NAME, tract_id_synth, tot_pop_block, total_hh_block, tot_empl, high_wage, mid_wage, low_wage)

head(df_joined_blocks)



# Convert columns to strings
sf_tracts$GEOID <- as.character(sf_tracts$GEOID)
df_commute$GEO_ID <- as.character(df_commute$GEO_ID)
df_disabled$GEO_ID <- as.character(df_disabled$GEO_ID)
df_vehicles$GEO_ID <- as.character(df_vehicles$GEO_ID)
df_language$GEO_ID <- as.character(df_language$GEO_ID)
df_age$GEO_ID <- as.character(df_age$GEO_ID)
df_income$GEO_ID <- as.character(df_income$GEO_ID)
df_racehisp$GEO_ID <- as.character(df_racehisp$GEO_ID)

# Join on tables on GEO_ID and NAME
df_joined <- left_join(df_commute, df_disabled, by = c("GEO_ID", "NAME")) %>%
            left_join(df_vehicles,  by = c("GEO_ID", "NAME")) %>%
            left_join(df_language, by = c("GEO_ID", "NAME")) %>%
            left_join(df_age, by = c("GEO_ID", "NAME")) %>%
            left_join(df_income, by = c("GEO_ID", "NAME")) %>%
            left_join(df_racehisp, by = c("GEO_ID", "NAME"))

# Calculate percentage of residents who are workers
df_joined$workers_perc <- df_joined$total_workers / df_joined$total_pop_uable

# Calculate percentage of workers commuting by walk/bike/transit 
df_joined$sustainable_mode_workers_perc <- df_joined$workers_perc * df_joined$walk_bike_transit_commuters_perc

# create new column for joining tract to census blocks
#df_joined$tract_id_synth <- df_joined$GEO_ID %>% str_sub(0, 20)
df_joined$tract_id_synth <- as.character(substr(df_joined$GEO_ID, 10, 20))

# Maybe replace NaN with 0 here

# create new column for joining tract to census blocks
#df_joined$GEO_ID_tract_synth <- df_joined$GEO_ID %>%
#  str_sub(0, 1) %>%
#  paste0("4", str_sub(3, 20))

# create a new dataframe with only needed columns
df_joined <- df_joined %>%
  select(tract_id_synth, walk_bike_transit_commuters_perc, disabled_tract_perc, veh_0_1_hh_perc, all_nwell_perc, all_youth_perc, all_elderly_perc, income_u_60k_perc, all_minority_perc, sustainable_mode_workers_perc)

# Print to check for issues
head(df_joined)



# Join blocks to tracts by tract_id_synth
df_joined <- left_join(df_joined_blocks, df_joined, by = c("tract_id_synth"))

# Create new columns in df_joined with the results of all of the given expressions
df_joined <- df_joined %>%
  mutate(
    est_hh_income_u_60k = total_hh_block * as.numeric(income_u_60k_perc),
    est_hh_veh_0_1_hh = total_hh_block * as.numeric(veh_0_1_hh_perc),
    est_disabled = tot_pop_block * as.numeric(disabled_tract_perc),
    est_all_nwell = tot_pop_block * as.numeric(all_nwell_perc),
    est_youth = tot_pop_block * as.numeric(all_youth_perc),
    est_elderly = tot_pop_block * as.numeric(all_elderly_perc),
    est_minority = tot_pop_block * as.numeric(all_minority_perc),
    est_sustainable_mode_workers = tot_pop_block * as.numeric(sustainable_mode_workers_perc)
  )

# create a new dataframe with only needed columns
df_joined <- df_joined %>%
  select(GEO_ID, NAME, tract_id_synth, total_hh_block, tot_pop_block, tot_empl, low_wage, mid_wage, high_wage, est_hh_income_u_60k, est_hh_veh_0_1_hh, est_disabled, est_all_nwell, est_youth, est_elderly, est_minority, est_sustainable_mode_workers)

print(df_joined)

```

```{r merge data join to .shp}

# join for tract .shp

# Convert columns to strings
sf_tracts$tract_id_synth <- as.character(sf_tracts$tract_id_synth)
df_joined$tract_id_synth <- as.character(df_joined$tract_id_synth)

# Join sf_tracts and df_vehicles based on tract_id_synth column
sf_tracts <- sf_tracts %>%
  left_join(df_joined, by = c("tract_id_synth"))

# Get column index for LineAbbr
county_id_index <- which(colnames(sf_tracts) == "income_u_60k_perc")

# Print first 6 rows of census shapefile attribute table to check for issues
print("Printing first 6 rows of stops shapefile attribute table:")
print(sf_tracts[1:6,])

# Plot LineAbbr column to check for issues
plot(sf_tracts[,county_id_index], 
     main="Census Tracts")

# Write shapefile based on file path defined at beginning
st_write(sf_tracts, shapefile_export_path, driver = "ESRI Shapefile")

```
